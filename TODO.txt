- Parse ruby Object to Lua Table

[o] spec table.free()
[o] function.call()
[o] Table#[]
[o] Table + Enumerable (not necessarily)

[x] State#stack_ready() maybe : NO !

[o] better protection for State methods (into lib ?)

[o] fix coroutine & co / memoization (make it better later)
[o] fib.lua, use local, bench ! (2 times faster almost)

[o] add GC control methods (Alain)
[X] Add method to disable GC
[X] Add method to enable GC
[ ] Look at parameters in Lua GC that can be tweaked
[ ] Add method to tune GC parameters
[ ] Test whether GC is truly independent for each state

[x] ruby callbacks (functions)
[ ] ability to bind ruby functions (callbacks) inside of tables (modules)

[ ] state['var'] = value
[ ] state['var'] = hash

[ ] state.load_and_eval(filepath)

